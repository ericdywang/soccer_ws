<!-- Launches the localization using for amcl the robot -->

<launch>
    <arg name="darknet"         default="true" />
    <arg name="robot_name" />
    <arg name="map_name" />

    <!-- Map server -->
    <node name="map_server" pkg="map_server" type="map_server"
          args="$(find soccer_common)/maps/$(arg map_name).yaml">
        <param name="frame_id" value="world"/>
    </node>

    <!-- Line and goal detection -->
    <node pkg="soccer_fieldline_detection" type="soccer_fieldline_detector" name="soccer_fieldline_detector"
          output="screen">
        <rosparam file="$(find soccer_fieldline_detection)/config/fieldline_detection.yaml" command="load"/>
        <param name="tf_namespace" value="$(arg robot_name)/" />
    </node>

    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
        <rosparam file="$(find soccer_fieldline_detection)/config/pointcloud_to_laserscan.yaml" command="load" />
        <remap from="cloud_in" to="field_point_cloud" />
    </node>

    <!-- Ball Detection -->
    <node name="ball_detector" pkg="soccer_fieldline_detection" type="ball_detector">
        <param name="tf_namespace" value="$(arg robot_name)/" />
    </node>

    <rosparam command="load" ns="darknet_ros" file="$(find soccerbot)/config/darknet_ros.yaml"/>
    <rosparam command="load" ns="darknet_ros" file="$(find soccerbot)/config/yolov2-tiny.yaml"/>
    <rosparam ns="darknet_ros" param="subscribers/camera_reading/topic" subst_value="true" >/$(arg robot_name)/camera/image_raw</rosparam>
    <rosparam ns="darknet_ros" param="publishers/object_detector/topic" subst_value="true" >/$(arg robot_name)/darknet_ros/found_object</rosparam>
    <rosparam ns="darknet_ros" param="publishers/bounding_boxes/topic" subst_value="true" >/$(arg robot_name)/darknet_ros/bounding_boxes</rosparam>
    <rosparam ns="darknet_ros" param="publishers/detection_image/topic" subst_value="true" >/$(arg robot_name)/darknet_ros/detection_image</rosparam>
    <node pkg="darknet_ros" type="darknet_ros" name="darknet_ros" output="log">
        <param name="weights_path"          value="$(find darknet_ros)/yolo_network_config/weights" />
        <param name="config_path"           value="$(find darknet_ros)/yolo_network_config/cfg" />
    </node>

    <!-- Complementary filter -->
    <node pkg="imu_complementary_filter" type="complementary_filter_node" name="imu_complementary_filter">
        <rosparam file="$(find soccerbot)/config/imu_complementary_filter.yaml" command="load" />
        <param name="fixed_frame" value="$(arg robot_name)/odom" />
        <remap from="imu/data_raw" to="imu_raw" />
        <remap from="imu/data" to="imu" />
    </node>
    
    <!-- IMU location -->
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
        <rosparam file="$(find soccerbot)/config/robot_pose_ekf.yaml" command="load" />
        <param name="output_frame" value="$(arg robot_name)/odom" />
        <param name="base_footprint_frame" value="$(arg robot_name)/base_footprint" />
        <remap from="robot_pose_ekf/odom_combined" to="odom_combined" />
        <remap from="imu_data" to="imu" />
    </node>

    <!-- AMCL Localization -->
    <node pkg="amcl" type="amcl" name="amcl">
        <rosparam file="$(find soccerbot)/config/amcl.yaml" command="load" />
        <rosparam param="odom_frame_id" subst_value="true" >$(arg robot_name)/odom</rosparam>
        <rosparam param="base_frame_id" subst_value="true" >$(arg robot_name)/base_camera</rosparam>
    </node>

   <!-- Static publisher for odom
    <node pkg="tf2_ros" type="static_transform_publisher" name="odom_broadcaster" args="0 0 0 0 0 0 1 odom base_footprint" />

-->
    <node pkg="rostopic" type="rostopic" name="odom_broadcaster"
    args="pub /$(arg robot_name)/odom nav_msgs/Odometry
        '{header: {seq: 0, stamp: { secs: 0, nsecs: 0}, frame_id: 'odom'},child_frame_id: 'base_footprint',
        pose:
          {pose: {position: {x: 0.0, y: 0.0, z: 0.0}, orientation: {x: 0.0, y: 0.0, z: 0.0, w: 1.0}},
          covariance:      [0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
                            0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
                            0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
                            0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
                            0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
                            0.0, 0.0, 0.0, 0.0, 0.0, 0.1]},
        twist:
          {twist: {linear: {x: 0.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0.0}}
          ,covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                            0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}}' --once"
     output="screen"/>

</launch>